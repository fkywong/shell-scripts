#!/bin/bash

UNDERLINE=$( tput smul )
NOUNDERLINE=$( tput rmul )

function getHelp() {
	printf "Usage:\t$( basename ${0} ) ${UNDERLINE}USB_PARTITION${NOUNDERLINE} [${UNDERLINE}MOUNT_POINT${NOUNDERLINE}]\n"
	printf "\tIf USB_PARTITION is already mounted, then it will provide an option to unmount\n"
}

function error() {
	printf "[ERROR]\t${@}\n\nRefusing to continue...\n" >&2
	exit 1
}

function warn() {
	printf "[WARN]\t${@}\n"
}

function info() {
	printf "[INFO]\t${@}\n"
}

function yesno() {
	printf "${@}"
	while read -sn 1 LINE_IN; do
		case ${LINE_IN} in
			[Yy] ) printf "\n"; return 0;;
			[Nn] ) printf "\n"; return 1;;
			* ) ;; # printf "\nPlease input (y)es or (n)o:\t"
		esac
	done
}

# This function checks for a valid first argument
function firstArgCheck() {
	if [[ "${SRC_PT}" =~ ^/dev/sd[a-z]+[0-9]+$ ]]; then
		if sudo blkid ${SRC_PT} &> /dev/null; then
			DEST=$( lsblk -n -o MOUNTPOINT ${SRC_PT} )
			if [[ ! -z "${DEST}" ]]; then
				printf "[WARN]\tPartition '${SRC_PT}' is already mounted at '${DEST}'!\n" >&2
				yesno "Would you like to dismount the partition instead (y/n)? " || exit 0
				sudo umount ${DEST}
				if [[ ${?} -eq 0 ]]; then
					info "Successfully unmounted '${SRC_PT}'"
					yesno "Would you like to remove directory '${DEST}' (y/n)? " || exit 0
					sudo rmdir ${DEST}
					if [[ ${?} -eq 0 ]]; then
						info "Successfully removed folder '${DEST}'"
						exit 0
					else
						error "Unable to remove folder '${DEST}'"
					fi
				else
					error "Unable to unmount '${SRC_PT}'"
				fi
			else
				:
			fi
		else
			error "Partition '${SRC_PT}' doesn't exist!"
		fi
	elif [[ "${SRC_PT}" =~ ^sd[a-z]+[0-9]?$ ]]; then
		warn "'/dev/' prefix is missing from argument; assuming you meant /dev/${SRC_PT}"
		SRC_PT=/dev/${SRC_PT}
		firstArgCheck
	elif [[ "${SRC_PT}" =~ ^/dev/sd[a-z]+$ ]]; then
		error "No partition was specified for source device '${SRC_PT}'"
	else
		error "Invalid source disk '${SRC_PT}' (not a Linux disk, e.g. /dev/sdb)"
	fi
}

[[ ${1} =~ ^-+h? ]] && getHelp  && exit 0

# This section does general checks
[[ "$( sudo whoami )" != root ]] && error "Insufficient privileges!"
! which blkid lsblk mktemp &> /dev/null && error "Tools 'blkid', 'lsblk', and/or 'mktemp' not found"
[[ ${#} -gt 2 ]] && error "Invalid number of arguments\n\nUsage:\t${0} SOURCE_DEVICE [MOUNT_POINT]"
[[ ${#} -lt 1 ]] && printf "No source disk specified!\nChoose one from the table below or re-run w/ the '--help' flag:\n\n" \
	&& lsblk -o NAME,SIZE,MOUNTPOINT | awk '{ print "\t"$0; }' && exit 0
SRC_PT=$( echo "${1}" | sed 's;/$;;')
MNT_PT=${2}

firstArgCheck

# This section checks/sets a valid second argument
if [[ -z "${MNT_PT}" ]]; then
	MNT_PT=$( sudo mktemp -d --tmpdir=/media usb.XXXXXX )
elif [[ ! -d "${MNT_PT}" ]]; then
	sudo mkdir -p ${MNT_PT} || error "Could not create folder '${MNT_PT}'"
elif [[ -d "${MNT_PT}" && ! -z "$( ls -A "${MNT_PT}" )" ]]; then
	error "Existing files in '${MNT_PT}' will be clobbered during mount!"
else
	:
fi

# This section allows different mounting options based on the format type of the partition
TYPE=$( sudo blkid -o value -s TYPE ${SRC_PT} )
case ${TYPE} in
	vfat)
		COMMAND="sudo mount -t ${TYPE} -o uid=$( id -u ),gid=$( id -g ),umask=0055 ${SRC_PT} ${MNT_PT}"
		;;
	*)
		COMMAND="sudo mount -t autofs ${SRC_PT} ${MNT_PT}"
		;;
esac

eval ${COMMAND}
if [[ ${?} -eq 0 ]]; then
	info "'${SRC_PT}' successfully mounted at '${MNT_PT}'\n"
	exit 0
else
	printf "[FAIL]\tMounting failed with the command \`${CMD}'.\n" >&2
	exit 1
fi
