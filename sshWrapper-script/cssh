#!/bin/bash

HOST_LIST="hh- porcupine-"
FILE_LIST="~/.bashrc ~/.vimrc ~/.vim/"
CLEAN_ON_EXIT=false

########################################################
# ANY MODIFICATIONS AFTER THIS POINT ARE NOT SUPPORTED #
########################################################

function error() {
	printf "[ERROR]\t${@}" >&2
}

function warn() {
	printf "[WARN]\t${@}"
}

function info() {
	printf "[INFO]\t${@}"
}

function autoSSH() {
	ssh -o PasswordAuthentication=no -o ConnectTimeout=3 -n ${@} 2>&1
	return ${?}
}

FILE_LIST=$( eval "echo ${FILE_LIST}" )
SSH_CREDS=$( autoSSH -v ${@} | sed -n 's/.*\ Connecting\ to\ \(\([[:alnum:]]\+[-.]\?\)\+\)\ .*port\ \([[:digit:]]\+\)\./\1 \3/p' )
SSH_HOST=$( echo ${SSH_CREDS} | awk '{print $1}' )
SSH_PORT=$( echo ${SSH_CREDS} | awk '{print $2}' )

if [[ -n "${SSH_HOST}" ]] && echo "${SSH_HOST}" | grep -q -e "$( echo "${HOST_LIST}" | sed 's/\ /\\\|/g' )"; then
	SSH_CREDS=$( echo ${@} | grep -oe "[^[:space:]]\+@\?${SSH_HOST}" )
	for FILE in ${FILE_LIST}; do
		if [[ -e ${FILE} ]]; then
			RMTFILELIST+="$( basename ${FILE} ) "
		else
			warn "File '${FILE}' does not exist\n\t\tCheck the FILE_LIST variable in '${0}'\n"
			info "Continuing on without file '${FILE}'\n"
			FILE_LIST=$( echo ${FILE_LIST} | sed "s/${FILE}//" )
		fi
	done

	info "Copying the specified files over..."
	ssh -q ${SSH_CREDS} "mkdir -p ~/${USER}/"
	scp -prq ${FILE_LIST} ${SSH_CREDS}:~/${USER}/

	if [ ${?} -eq 0 ]; then
		printf "Success!\n"
		ssh ${@}
		EXIT=${?}

		if [[ "${CLEAN_ON_EXIT}" == "true" ]]; then
			info "Cleaning up remote files based on your FILELIST variable..."
			ssh -q ${SSH_CREDS} "cd ~/${USER}/ && rm -rf ${RMTFILELIST}; cd; rmdir --ignore-fail-on-non-empty ~/${USER}/"
			if [[ ${?} -eq 0 ]]; then
				printf "Success!\n"
				exit 0
			else
				printf "Failure!\n"
				exit ${EXIT}
			fi
		else
			exit ${EXIT}
		fi
	else
		printf "Failure!\n"
		error "Falling back to regular ssh mode\n"
		ssh ${@}
		exit ${?}
   fi
else
	ssh ${@}
	exit ${?}
fi
